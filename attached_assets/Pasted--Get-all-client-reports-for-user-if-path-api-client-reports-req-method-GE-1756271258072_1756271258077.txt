    // Get all client reports for user
    if (path === '/api/client-reports' && req.method === 'GET') {
      const user = authenticateToken(req);
      if (!user) {
        return res.status(401).json({ message: 'Authentication required' });
      }

      try {
        const reports = await db
          .select()
          .from(clientReports)
          .where(eq(clientReports.userId, user.id))
          .orderBy(desc(clientReports.createdAt));

        // Enrich each report with client and website information
        const enrichedReports = await Promise.all(reports.map(async (report) => {
          let clientName = 'N/A';
          let websiteName = 'N/A';
          
          try {
            // Fetch client information if clientId exists
            if (report.clientId) {
              const clientRecord = await db
                .select()
                .from(clients)
                .where(and(eq(clients.id, report.clientId), eq(clients.userId, user.id)))
                .limit(1);
              
              if (clientRecord.length > 0) {
                clientName = clientRecord[0].name || 'Valued Client';
              }
            }
            
            // Fetch website information if websiteIds exist
            const websiteIds = Array.isArray(report.websiteIds) ? report.websiteIds : [];
            if (websiteIds.length > 0) {
              const websiteRecord = await db
                .select()
                .from(websites)
                .where(and(eq(websites.id, websiteIds[0]), eq(websites.clientId, report.clientId)))
                .limit(1);
              
              if (websiteRecord.length > 0) {
                websiteName = websiteRecord[0].name || 'Website';
              }
            }
          } catch (error) {
            console.error(`Error fetching client/website data for report ${report.id}:`, error);
          }
          
          return {
            ...report,
            clientName,
            websiteName
          };
        }));

        return res.status(200).json(enrichedReports);
      } catch (error) {
        console.error('Error fetching client reports:', error);
        return res.status(500).json({ message: 'Failed to fetch client reports' });
      }
    }
